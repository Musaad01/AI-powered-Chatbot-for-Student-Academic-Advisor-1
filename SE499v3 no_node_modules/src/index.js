const express = require('express');
const cors = require('cors');
const { Configuration, OpenAIApi } = require('openai');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3100;

// Enable CORS for all routes
app.use(cors({
  origin: 'http://localhost:3000', // Allow only your frontend URL
  methods: ['GET', 'POST'], // Allow only GET and POST requests
  allowedHeaders: ['Content-Type', 'Authorization'] // Allow these headers
}));

// Parse JSON bodies
app.use(express.json());

// Configure OpenAI
const configuration = new Configuration({
    apiKey: "-"
});
const openai = new OpenAIApi(configuration);

// Route for generating text using OpenAI
app.post('/generate-text', async (req, res) => {
  try {
    const { prompt } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ error: 'Prompt is required' });
    }

    console.log('Received prompt:', prompt);

    const response = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 150,
    });

    console.log('OpenAI response:', response.data);

    if (response.data && response.data.choices && response.data.choices[0] && response.data.choices[0].message) {
      res.json({ generatedText: response.data.choices[0].message.content.trim() });
    } else {
      throw new Error('Unexpected response structure from OpenAI');
    }
  } catch (error) {
    console.error('Error during OpenAI API call:', error.response ? error.response.data : error.message);
    res.status(500).json({ error: 'An error occurred while generating text' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
